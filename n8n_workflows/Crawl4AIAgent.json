{
  "name": "Crawl4AIAgent",
  "nodes": [
    {
      "parameters": {
        "url": "={{$json.output.url_with_sitemap}}",
        "options": {}
      },
      "id": "db16001f-6f6b-424c-8d8f-68fab9c33fe4",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -832,
        80
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "00bb0200-26cc-4b09-9093-d8b9b667a889",
      "name": "XML",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        -624,
        288
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "urlset.url",
        "options": {}
      },
      "id": "ec2433c8-a7ee-44eb-bf5e-0b7e1b509161",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -464,
        80
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "52613722-7d95-4572-8700-cb0924aeaf73",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -224,
        176
      ]
    },
    {
      "parameters": {
        "amount": 0.5
      },
      "id": "d481302b-1c36-4b10-ba2b-09e3a55d8ed7",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        192,
        176
      ],
      "webhookId": "9af87c5e-b07f-48dc-9ca8-61b471a24cad"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localai-crawl4ai-1:11235/crawl",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "urls",
              "value": "={{ [$json.loc] }}"
            },
            {
              "name": "priority",
              "value": "10"
            }
          ]
        },
        "options": {}
      },
      "id": "91a44795-0118-4099-8b25-be549298bbd3",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        176
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "bcFcXchiS8AUnfYK",
          "name": "Header Auth account"
        },
        "httpBearerAuth": {
          "id": "JI2YN1F3PvVo8YFm",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "=http://localai-crawl4ai-1:11235/crawl",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "timeout": 5000
        }
      },
      "id": "62bf5e07-7cc2-4ea4-a76a-2b014197cd3f",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        416,
        304
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "bcFcXchiS8AUnfYK",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9d90c1ce-590e-40a5-ae8c-d92326032975",
              "leftValue": "={{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "1c58c35b-678e-4af4-8e75-bafce851e0e1",
              "leftValue": "={{ $json.results[0].markdown.raw_markdown }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "d74ca596-81e5-4253-b605-cfa399eb61ab",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        624,
        176
      ]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.results[0].markdown.raw_markdown }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "page",
                "value": "={{ $json.results[0].url }}"
              }
            ]
          }
        }
      },
      "id": "e44e23d7-82c3-4d27-b2c1-dc0c00869dd4",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1008,
        176
      ]
    },
    {
      "parameters": {
        "chunkSize": 5000
      },
      "id": "ede95b4e-7ddc-4467-8cc4-22204efcf720",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1008,
        320
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f2bcdb54-e1fe-4670-99aa-6eec973bf5f1",
              "name": "task_id",
              "value": "={{ $('HTTP Request1').item.json.task_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "57add9cb-8422-4ea3-a58a-1c0cf8cb2a90",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        864,
        384
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "82f25f90-4229-415b-bac8-f9f186e2471c",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        880,
        -224
      ],
      "credentials": {
        "supabaseApi": {
          "id": "481woVBRUXLcKbYO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "# n8n + Crawl4AI Agent\n\n## Author: [Cole Medin](https://www.youtube.com/@ColeMedin)\n\nThis AI agent demonstrates how to use a Docker deployment of Crawl4AI to leverage this incredible open source web scraping tool directly in n8n.\n\nThe prerequisite for this workflow is that you have Crawl4AI hosted in a Docker container following these [instructions in the their docs](https://docs.crawl4ai.com/core/docker-deploymeny/).\n\n## How to use this workflow\n\n1. Execute the bottom workflow by clicking on \"Test workflow\". This will ingest all the Pydantic AI documentation into the Supabase DB for RAG.\n\n2. Chat with the agent with the \"Chat\" button - it'll be able to answer questions about Pydantic AI using the documentation as its source!\n\n## Extend this workflow!\n\nThis is just a starting point showing you how to use Crawl4AI in n8n! Feel free to take this along with the Crawl4AI documentation to run wild with building RAG AI agents. The possibilities with this setup are endless!",
        "height": 613.6610941618816,
        "width": 589.875,
        "color": 6
      },
      "id": "39795c1c-46ec-42de-bfa0-6453cb5f6635",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -208,
        -688
      ]
    },
    {
      "parameters": {
        "model": "snowflake-arctic-embed2:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        864,
        16
      ],
      "id": "9eeb623b-5fb2-4805-948d-80cd5ef6f7ba",
      "name": "Embeddings Ollama1",
      "credentials": {
        "ollamaApi": {
          "id": "U5zHY9FP46QpGa2j",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.output }}",
        "schemaType": "fromJson",
        "jsonSchemaExample": "{\n\"url\": \"https://something.com\",\n\"url_with_sitemap\": \"https://something.com/sitemap.xml\"\n}",
        "options": {
          "systemPromptTemplate": "=You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\nConvert Text to well-formed json using the example. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        -1408,
        80
      ],
      "id": "1727c340-0f10-425c-9448-6cfda6412a1e",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "model": "llama3.2:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -1408,
        272
      ],
      "id": "9032502d-e81f-4261-a026-5be0216e0308",
      "name": "Ollama Chat Model1",
      "credentials": {
        "ollamaApi": {
          "id": "U5zHY9FP46QpGa2j",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "A user may be wanting to import web documentation into the RAG datastore. So, look for a user request that appears to indicate that you should get or scrape from a url that is included in the incoming chat message.  Return only two items in JSON format: the url as output and the url with sitemap.xml postpended to it.  Only add one slash character after the base website address, whether or not the user prompt included it.\n\nExample:\nInput:\nscrape this website something.com\n\nOutput:\n{\n\"url\": \"https://something.com\",\n\"url_with_sitemap\": \"https://something.com/sitemap.xml\"\n}\n\nReplace \"something.com\" with the url provided in the input.  Include the close curly bracket in the json output, make sure the json is well formed per the example output above before returning a value.  Do not include any helpful messages or explanatory text."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -1760,
        80
      ],
      "id": "364981ca-56b0-4a9c-8384-3c950b207434",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": "llama3.2:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -1760,
        288
      ],
      "id": "9e64701c-a1e0-43dd-a346-aeb95ec8e28f",
      "name": "Ollama Chat Model2",
      "credentials": {
        "ollamaApi": {
          "id": "U5zHY9FP46QpGa2j",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.output.url_with_sitemap }}",
        "options": {}
      },
      "id": "5c2c8d30-5fda-4a48-ac30-172ccfe829d7",
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1344,
        448
      ]
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "sessionId"
            },
            {
              "name": "chatInput"
            },
            {
              "name": "action"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1968,
        80
      ],
      "id": "3c938434-d44b-4ee5-b346-0615be753cca",
      "name": "When Executed by Another Workflow"
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "XML": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c9407a85-fbf0-4d65-b46a-85ad0ae73420",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a819d7cd38e9101be2e496298e8bf426ce9cdf78d2af35ddf44c6ad25d50158b"
  },
  "id": "qB36CchcMC82hch1",
  "tags": []
}