volumes:
  pgadmin-data:
  n8n_storage:
  postgres_storage:
  postgres_age_storage:
  ollama_storage:
  open-webui:
  lightrag_storage:

networks:
    web:
      # external: true
      driver:  bridge

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  # build:
    # context: .
    # dockerfile: Dockerfile_n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=db
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
    - WEBHOOK_URL=${N8N_HOSTNAME:+https://}${N8N_HOSTNAME:-http://localhost:5678}
    - NODE_FUNCTION_ALLOW_EXTERNAL=*
    - COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=${N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE}
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
    - N8N_RUNNERS_ENABLED=true
  env_file:
    - path: .env
      required: true

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  env_file:
    - path: .env
      required: true
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  env_file:
    - path: .env
      required: true
  environment:
    - OLLAMA_HOST=http://ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2; ollama pull nomic-embed-text" # MVP
    # # - "sleep 3; ollama pull llama3.2; ollama pull nomic-embed-text; ollama pull mistral; ollama pull qwen3-coder:30b; ollama pull deepseek-r1:14b; ollama pull qwen3:14b"

services:
  lightrag:
    container_name: lightrag
    image: ghcr.io/hkuds/lightrag:latest
    # build:
      # context: .
      # dockerfile: ./LightRAG/Dockerfile
      # tags:
        # - ghcr.io/hkuds/lightrag:latest
    ports:
      - "${PORT:-9621}:9621"
    volumes:
      - ./LightRAG/data/rag_storage:/app/data/rag_storage
      # - ./LightRAG/data/inputs:/app/data/inputs
      # - ./LightRAG/data/tiktoken:/app/data/tiktoken
      - ./LightRAG/config.ini:/app/config.ini
      - ./LightRAG/.env:/app/.env
    env_file:
      - .env
    environment:
      - POSTGRES_DATABASE=${POSTGRES_DB}
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - LIGHTRAG_API_KEY
      # - TIKTOKEN_CACHE_DIR=/app/data/tiktoken
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    # image: postgres:16-alpine
    image: 'docker.io/pgvector/pgvector:pg17'
    # build:
      # context: .
      # dockerfile: ./Dockerfile_postgres
      # tags:
        # - ghcr.io/hkuds/lightrag:latest
    hostname: db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS}
    expose:
      - 5432/tcp
    ports: # for pgadmin
      - 15432:5432
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./init_vec.sql:/docker-entrypoint-initdb.d/init_vec.sql
      # - ./init_age.sql:/docker-entrypoint-initdb.d/init_age.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # age:
    # image: 'docker.io/apache/age:latest'
    # # image: apache/age
    # depends_on:
      # - postgres
    # environment:
      # POSTGRES_HOST: db
      # POSTGRES_USER: ${POSTGRES_USER}
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # POSTGRES_DB: ${POSTGRES_DB}
    # # ports:
      # # - 5555:5555
    # volumes:
      # - postgres_age_storage:/var/lib/age
    # # command: ["agentic_home_ai_lab-age-1", "--host", "0.0.0.0", "--port", "5432", "--store", "postgresql://postgres:postgres@db/postgres"]


  pgadmin:
    image: 'docker.io/dpage/pgadmin4:latest'
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
    ports:
      - 15080:80
    volumes:
      - pgadmin-data:/var/lib/pgadmin/

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    volumes:
      - open-webui:/app/backend/data
    <<: *service-ollama  # needed to make this work
    ports:
      - 8080:8080
    environment:
      - 'OLLAMA_BASE_URL=http://host.docker.internal:11434' # This works!
      - 'WEBUI_SECRET_KEY='
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./drop_folder:/data/drop_folder
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd

  chrome:
    image: selenium/standalone-chrome:latest
    hostname: chrome
    networks:
      - web
    privileged: true
    shm_size: 2g
  
  framework:
    build:
      context: .
      dockerfile: Dockerfile_selenium
    networks:
      - web
    depends_on: 
      - chrome

# configs:
  # qdrant_config:
    # content: |
      # log_level: INFO
      
include:
  - ./crawl4ai/docker-compose.yml